#!/bin/bash

#  BerkeleyGW Tools
#  Copyright (C) 2011 Felipe Homrich da Jornada <jornada@berkeley.edu>

# This examples shows how to use the output of sigma (from BerkeleyGW package)
# from a graphene calculation and create a path in the k-space that can be
# easily plotted. The following path is used in the example:
#  Gamma->M->K->Gamma

# Thw following file is provided for this demonstration:
#  eqp_co.corrections: generated by sigma, using eqp.py script (provided in
#     BerkeleyGW package)

# Important Parameters:
# -k  set of k-points used in the path. Different points are separated by
#     columns, and components that are not specified are assumed to be zero.
#     Eg: 0:0,.5 means point Gamma and M=(0.0, 0.5, 0.0)
# -m  select points that are within this distance of the path. The finer the
#     grid, the smaller you probably want to set this number. If this param
#     is too small, no points will be selected; if it's too big, you might 
#     select too many points and make your line wiggly. A good value is 
#     around the average spacing of your grid.

eqp2path=../converters/eqp2path.py
path='0:0,.5:0.025,0.475:.325,.325:0'

echo 'Creating path for coarse band structure (LDA+GW)'
$eqp2path -m 1e-2 -k $path --data LDA eqp_co.corrections path.co_LDA
$eqp2path -m 1e-2 -k $path --data GW  eqp_co.corrections path.co_GW

# You could also create a path using the interpolated eqp.corrections,
#   produced by diag/haydock
#echo 'Creating path for k.p interpolated band structure (LDA+GW)'
#$eqp2path -m 1e-3 -k $path --data LDA eqp.corrections path.fi_LDA
#$eqp2path -m 1e-3 -k $path --data GW  eqp.corrections path.fi_GW

echo 'Plotting LDA and GW bandstructure'


